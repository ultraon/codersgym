name: Flutter APK Build

on:
  push:
    tags:
      - 'v*'  # This ensures the workflow runs on any tag that starts with 'v'
env:
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 🐦 Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true
      
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # Use 'temurin' or 'zulu'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'  # Specify Flutter version 3.24.3

      - name: Install dependencies
        run: flutter pub get

      - name: Create google-services.json
        env:
          GOOGLE_SERVICES_JSON_BASE64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
        run: |
          echo $GOOGLE_SERVICES_JSON_BASE64 | base64 --decode > android/app/google-services.json

      - name: Generate firebase_options.dart
        env:
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
        run: |
          mkdir -p lib
          echo "// File generated by GitHub Actions." > lib/firebase_options.dart
          echo "// ignore_for_file: type=lint" >> lib/firebase_options.dart
          echo "import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;" >> lib/firebase_options.dart
          echo "import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;" >> lib/firebase_options.dart
          echo "" >> lib/firebase_options.dart
          echo "class DefaultFirebaseOptions {" >> lib/firebase_options.dart
          echo "  static FirebaseOptions get currentPlatform {" >> lib/firebase_options.dart
          echo "    if (kIsWeb) {" >> lib/firebase_options.dart
          echo "      throw UnsupportedError('Web not supported in this configuration');" >> lib/firebase_options.dart
          echo "    }" >> lib/firebase_options.dart
          echo "    switch (defaultTargetPlatform) {" >> lib/firebase_options.dart
          echo "      case TargetPlatform.android:" >> lib/firebase_options.dart
          echo "        return android;" >> lib/firebase_options.dart
          echo "      default:" >> lib/firebase_options.dart
          echo "        throw UnsupportedError('Platform not supported');" >> lib/firebase_options.dart
          echo "    }" >> lib/firebase_options.dart
          echo "  }" >> lib/firebase_options.dart
          echo "" >> lib/firebase_options.dart
          echo "  static const FirebaseOptions android = FirebaseOptions(" >> lib/firebase_options.dart
          echo "    apiKey: '${{ secrets.FIREBASE_API_KEY }}'," >> lib/firebase_options.dart
          echo "    appId: '${{ secrets.FIREBASE_APP_ID }}'," >> lib/firebase_options.dart
          echo "    messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}'," >> lib/firebase_options.dart
          echo "    projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'," >> lib/firebase_options.dart
          echo "    storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}'," >> lib/firebase_options.dart
          echo "  );" >> lib/firebase_options.dart
          echo "}" >> lib/firebase_options.dart

      - name: Run build_runner
        run: dart run build_runner build --delete-conflicting-outputs

      - name: 🔐 Decode Keystore
        run: echo ${{ secrets.SIGNING_KEY }} | base64 --decode > ${{ github.workspace }}/android/app/app_keystore.jks

      - name: 🔑 Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEY_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ALIAS }}" >> android/key.properties
          echo "storeFile=app_keystore.jks" >> android/key.properties
      
      - name: 🚀 Shorebird Release
        uses: shorebirdtech/shorebird-release@v0
        with:
          platform: android
          args: "--verbose --artifact=apk"
      - name: Create Google Service Account creds
        env:
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
        run: echo $GOOGLE_SERVICE_ACCOUNT | base64 --decode > android/fastlane/coders-gym-creds.json
      - name: Set up Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
          working-directory: 'android'

      - name: Deploy to Google Play Store
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: 'deploy'
          subdirectory: 'android'
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}  # Automatically picks the tag name from the trigger
          release_name: Release ${{ github.ref_name }}  # Release name will match the tag name
          files: build/app/outputs/flutter-apk/app-release.apk # Directly references the APK
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub Token for authentication
